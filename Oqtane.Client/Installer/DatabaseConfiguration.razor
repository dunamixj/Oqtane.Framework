@using Oqtane.Shared
@using Oqtane.Client.Shared

@using Oqtane.Models;
@using System.Net.Http;
@inject HttpClient http
@inject IUriHelper UriHelper

<table class="form-group" cellpadding="4" cellspacing="4">
    <tbody>
        <tr>
            <td>
                <label for="Title" class="control-label" style="font-weight: bold">Database Type: </label>
            </td>
            <td>
                <select class="custom-select" @onchange="@setDatabaseType">
                    <option value="File" selected>Database File</option>
                    <option value="Server">Database Server</option>
                </select>
            </td>
        </tr>
    </tbody>
</table>

<table class="form-group" cellpadding="4" cellspacing="4" style="@DatabaseTypeDisplay">
    <tbody>
        <tr>
            <td>
                <label for="Title" class="control-label" style="font-weight: bold">Server: </label>
            </td>
            <td>
                <input type="text" id="ServerName" class="form-control" bind="@ServerName" />
            </td>
        </tr>
        <tr>
            <td>
                <label for="Title" class="control-label" style="font-weight: bold">Database: </label>
            </td>
            <td>
                <input type="text" id="DatabaseName" class="form-control" bind="@DatabaseName" />
            </td>
        </tr>
        <tr>
            <td>
                <label for="Title" class="control-label" style="font-weight: bold">Integrated Security: </label>
            </td>
            <td>
                <select class="custom-select" @onchange="@setIntegratedSecurity">
                    <option value="true" selected>True</option>
                    <option value="false">False</option>
                </select>
            </td>
        </tr>
        <tr style="@IntegratedSecurityDisplay">
            <td>
                <label for="Title" class="control-label" style="font-weight: bold">Username: </label>
            </td>
            <td>
                <input type="text" id="Username" class="form-control" bind="@Username" />
            </td>
        </tr>
        <tr style="@IntegratedSecurityDisplay">
            <td>
                <label for="Title" class="control-label" style="font-weight: bold">Password: </label>
            </td>
            <td>
                <input type="password" id="Password" class="form-control" bind="@Password" />
            </td>
        </tr>
    </tbody>
</table>

<table class="form-group" cellpadding="4" cellspacing="4">
    <tbody>
        <tr>
            <td>
                &nbsp;
            </td>
            <td>
                @if (boolProcessing == false)
                {
                    <button type="button" label="Set Connection"
                            class="btn btn-success"
                            @onclick="@setConnection">
                        Set Connection
                    </button>
                }
                else
                {
                    <span>Processing...</span>
                }
            </td>
        </tr>
    </tbody>
</table>
@strStatusMessage

@code {
    [Parameter] EventCallback<string>
    InstallationState { get; set; }
    private string _absoluteUri;
    private ConnectionSetting connectionSetting = new ConnectionSetting();
    private Status status = new Status();
    string strStatusMessage = "";
    bool boolProcessing = false;

    private string DatabaseType = "File";
    private string DatabaseName = "oqtane";
    private string ServerName = "(local)";
    private bool IntegratedSecurity = true;
    private string Username = "TestDatabaseUser";
    private string Password = "password";

    private string DatabaseTypeDisplay = "display:none";
    private string IntegratedSecurityDisplay = "display:none";

    void setDatabaseType(UIChangeEventArgs e)
    {
    strStatusMessage = "";
    DatabaseType = Convert.ToString(e.Value);
    if (DatabaseType == "File")
    {
    DatabaseTypeDisplay = "display:none";
    }
    else
    {
    DatabaseTypeDisplay = "";
    }
    }

    void setIntegratedSecurity(UIChangeEventArgs e)
    {
    strStatusMessage = "";
    IntegratedSecurity = Convert.ToBoolean(e.Value);

    if (IntegratedSecurity)
    {
    IntegratedSecurityDisplay = "display:none";
    }
    else
    {
    IntegratedSecurityDisplay = "";
    }
    }

    private async void setConnection()
    {
    boolProcessing = true;
    strStatusMessage = "";

    connectionSetting.DatabaseName = DatabaseName;
    connectionSetting.DatabaseType = DatabaseType;
    connectionSetting.IntegratedSecurity = IntegratedSecurity;
    connectionSetting.Password = Password;
    connectionSetting.ServerName = ServerName;
    connectionSetting.Username = Username;

    _absoluteUri = UriHelper.GetAbsoluteUri();
    var result = await http.PostJsonAsync<Status>
        (_absoluteUri + @"api/InstallWizard/ConnectionSetting", connectionSetting);

        if (result.Success)
        {
        await InstallationState.InvokeAsync("InstallationScripts");
        }
        else
        {
        boolProcessing = false;
        strStatusMessage = result.StatusMessage;
        StateHasChanged();
        }
        }
        }
