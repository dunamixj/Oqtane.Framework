@namespace Oqtane.Modules.Admin.Profiles
@inherits ModuleBase
@inject NavigationManager NavigationManager
@inject IProfileService ProfileService
@inject IStringLocalizer<Edit> Localizer
@inject IStringLocalizer<SharedResources> SharedLocalizer

<form @ref="form" class="@(validated ? "was-validated" : "needs-validation")" novalidate>
    <div class="container">
        <div class="row mb-1 align-items-center">
            <Label Class="col-sm-3" For="name" HelpText="@Localizer["Name.HelpText"]" ResourceKey="Name">@Localizer["Name.Text"]</Label>
            <div class="col-sm-9">
                <input id="name" class="form-control" @bind="_name" maxlength="50" required />
            </div>
        </div>
        <div class="row mb-1 align-items-center">
            <Label Class="col-sm-3" For="title" HelpText="@Localizer["Title.HelpText"]" ResourceKey="Title">@Localizer["Title.Text"]</Label>
            <div class="col-sm-9">
                <input id="title" class="form-control" @bind="_title" maxlength="50" required />
            </div>
        </div>
        <div class="row mb-1 align-items-center">
            <Label Class="col-sm-3" For="description" HelpText="@Localizer["Description.HelpText"]" ResourceKey="Description">@Localizer["Description.Text"]</Label>
            <div class="col-sm-9">
                <textarea id="description" class="form-control" @bind="_description" rows="3" maxlength="256" required></textarea>
            </div>
        </div>
        <div class="row mb-1 align-items-center">
            <Label Class="col-sm-3" For="category" HelpText="@Localizer["Category.HelpText"]" ResourceKey="Category">@Localizer["Category.Text"]</Label>
            <div class="col-sm-9">
                <input id="category" class="form-control" @bind="_category" maxlength="50" />
            </div>
        </div>
        <div class="row mb-1 align-items-center">
            <Label Class="col-sm-3" For="order" HelpText="@Localizer["Order.HelpText"]" ResourceKey="Order">@Localizer["Order.Text"]</Label>
            <div class="col-sm-9">
                <input id="order" class="form-control" @bind="_vieworder" maxlength="4" required />
            </div>
        </div>
        <div class="row mb-1 align-items-center">
            <Label Class="col-sm-3" For="length" HelpText="@Localizer["Length.HelpText"]" ResourceKey="Length">@Localizer["Length.Text"]</Label>
            <div class="col-sm-9">
                <input id="length" class="form-control" @bind="_maxlength" maxlength="4" required />
            </div>
        </div>
        <div class="row mb-1 align-items-center">
            <Label Class="col-sm-3" For="rows" HelpText="@Localizer["Rows.HelpText"]" ResourceKey="Rows">@Localizer["Rows.Text"]</Label>
            <div class="col-sm-9">
                <input id="rows" class="form-control" @bind="_rows" maxlength="2" required />
            </div>
        </div>
        <div class="row mb-1 align-items-center">
            <Label Class="col-sm-3" For="defaultVal" HelpText="@Localizer["DefaultValue.HelpText"]" ResourceKey="DefaultValue">@Localizer["DefaultValue.Text"]</Label>
            <div class="col-sm-9">
                <input id="defaultVal" class="form-control" @bind="_defaultvalue" maxlength="2000" />
            </div>
        </div>
        <div class="row mb-1 align-items-center">
            <Label Class="col-sm-3" For="options" HelpText="@Localizer["Options.HelpText"]" ResourceKey="Options">@Localizer["Options.Text"]</Label>
            <div class="col-sm-9">
                <input id="options" class="form-control" @bind="_options" maxlength="2000" />
            </div>
        </div>
        <div class="row mb-1 align-items-center">
            <Label Class="col-sm-3" For="required" HelpText="@Localizer["Required.HelpText"]" ResourceKey="Required">@Localizer["Required.Text"]</Label>
            <div class="col-sm-9">
                <select id="required" class="form-select" @bind="_isrequired" required>
                    <option value="True">@SharedLocalizer["Yes"]</option>
                    <option value="False">@SharedLocalizer["No"]</option>
                </select>
            </div>
        </div>
        <div class="row mb-1 align-items-center">
            <Label Class="col-sm-3" For="validation" HelpText="@Localizer["Validation.HelpText"]" ResourceKey="Validation">@Localizer["Validation.Text"]</Label>
            <div class="col-sm-9">
                <input id="validation" class="form-control" @bind="_validation" maxlength="300" />
            </div>
        </div>
        <div class="row mb-1 align-items-center">
            <Label Class="col-sm-3" For="private" HelpText="@Localizer["Private.HelpText"]" ResourceKey="Private">@Localizer["Private.Text"]</Label>
            <div class="col-sm-9">
                <select id="private" class="form-select" @bind="_isprivate" required>
                    <option value="True">@SharedLocalizer["Yes"]</option>
                    <option value="False">@SharedLocalizer["No"]</option>
                </select>
            </div>
        </div>
    </div>
    <br />
    <button type="button" class="btn btn-success" @onclick="SaveProfile">@SharedLocalizer["Save"]</button>
    <NavLink class="btn btn-secondary" href="@NavigateUrl()">@SharedLocalizer["Cancel"]</NavLink>
    @if (PageState.QueryString.ContainsKey("id"))
    {
        <br />
        <br />
        <AuditInfo CreatedBy="@createdby" CreatedOn="@createdon" ModifiedBy="@modifiedby" ModifiedOn="@modifiedon"></AuditInfo>
    }
</form>

@code {
    private int _profileid = -1;
    private ElementReference form;
    private bool validated = false;
    private string _name = string.Empty;
    private string _title = string.Empty;
    private string _description = string.Empty;
    private string _category = string.Empty;
    private string _vieworder = "0";
    private string _maxlength = "0";
    private string _rows = "1";
    private string _defaultvalue = string.Empty;
    private string _options = string.Empty;
    private string _validation = string.Empty;
    private string _isrequired = "False";
    private string _isprivate = "False";
    private string createdby;
    private DateTime createdon;
    private string modifiedby;
    private DateTime modifiedon;

    public override SecurityAccessLevel SecurityAccessLevel => SecurityAccessLevel.Edit;

    public override string Actions => "Add,Edit";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (PageState.QueryString.ContainsKey("id"))
            {
                _profileid = Int32.Parse(PageState.QueryString["id"]);
                var profile = await ProfileService.GetProfileAsync(_profileid);
                if (profile != null)
                {
                    _name = profile.Name;
                    _title = profile.Title;
                    _description = profile.Description;
                    _category = profile.Category;
                    _vieworder = profile.ViewOrder.ToString();
                    _maxlength = profile.MaxLength.ToString();
                    _rows = profile.Rows.ToString();
                    _defaultvalue = profile.DefaultValue;
                    _options = profile.Options;
                    _validation = profile.Validation;
                    _isrequired = profile.IsRequired.ToString();
                    _isprivate = profile.IsPrivate.ToString();
                    createdby = profile.CreatedBy;
                    createdon = profile.CreatedOn;
                    modifiedby = profile.ModifiedBy;
                    modifiedon = profile.ModifiedOn;
                }
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Profile {ProfileId} {Error}", _profileid, ex.Message);
            AddModuleMessage(Localizer["Error.Profile.Load"], MessageType.Error);
        }
    }

    private async Task SaveProfile()
    {
        validated = true;
        var interop = new Interop(JSRuntime);

        // Validate all fields
        bool isNameValid = !string.IsNullOrEmpty(_name);
        bool isTitleValid = !string.IsNullOrEmpty(_title);
        bool isDescriptionValid = !string.IsNullOrEmpty(_description);
        bool isCategoryValid = true;  // Add validation logic for the category if needed
        bool isViewOrderValid = int.TryParse(_vieworder, out int viewOrder) && viewOrder >= 0;
        bool isMaxLengthValid = int.TryParse(_maxlength, out int maxLength) && maxLength >= 0;
        bool isRowsValid = int.TryParse(_rows, out int rows) && rows >= 1;
        bool isDefaultValueValid = true;  // Add validation logic for the default value if needed
        bool isOptionsValid = true;  // Add validation logic for the options if needed
        bool isValidationValid = true;  // Add validation logic for the validation if needed

        if (await interop.FormValid(form) && isNameValid && isTitleValid && isDescriptionValid && isCategoryValid &&
                isViewOrderValid && isMaxLengthValid && isRowsValid && isDefaultValueValid && isOptionsValid && isValidationValid)
        {
            try
            {
                Profile profile;
                if (_profileid != -1)
                {
                    profile = await ProfileService.GetProfileAsync(_profileid);
                }
                else
                {
                    profile = new Profile();
                }

                profile.SiteId = PageState.Site.SiteId;
                profile.Name = _name;
                profile.Title = _title;
                profile.Description = _description;
                profile.Category = _category;
                profile.ViewOrder = int.Parse(_vieworder);
                profile.MaxLength = int.Parse(_maxlength);
                profile.Rows = int.Parse(_rows);
                profile.DefaultValue = _defaultvalue;
                profile.Options = _options;
                profile.Validation = _validation;
                profile.IsRequired = (_isrequired == null ? false : Boolean.Parse(_isrequired));
                profile.IsPrivate = (_isprivate == null ? false : Boolean.Parse(_isprivate));
                if (_profileid != -1)
                {
                    profile = await ProfileService.UpdateProfileAsync(profile);
                }
                else
                {
                    profile = await ProfileService.AddProfileAsync(profile);
                }

                await logger.LogInformation("Profile Saved {Profile}", profile);
                NavigationManager.NavigateTo(NavigateUrl());
            }
            catch (Exception ex)
            {
                await logger.LogError(ex, "Error Saving Profile {ProfleId} {Error}", _profileid, ex.Message);
                AddModuleMessage(Localizer["Error.Profile.Save"], MessageType.Error);
            }
        }
        else
        {
            AddModuleMessage(SharedLocalizer["Message.InfoRequired"], MessageType.Warning);
            // Validation field warning messages
            if (!isNameValid) AddModuleMessage(Localizer["Error.Profile.Name"], MessageType.Warning);
            if (!isTitleValid) AddModuleMessage(Localizer["Error.Profile.Title"], MessageType.Warning);
            if (!isDescriptionValid) AddModuleMessage(Localizer["Error.Profile.Description"], MessageType.Warning);
            if (!isCategoryValid) AddModuleMessage(Localizer["Error.Profile.Category"], MessageType.Warning);
            if (!isViewOrderValid) AddModuleMessage(Localizer["Error.Profile.ViewOrder"], MessageType.Warning);
            if (!isMaxLengthValid) AddModuleMessage(Localizer["Error.Profile.Length"], MessageType.Warning);
            if (!isRowsValid) AddModuleMessage(Localizer["Error.Profile.Rows"], MessageType.Warning);
            if (!isDefaultValueValid) AddModuleMessage(Localizer["Error.Profile.DefaultValue"], MessageType.Warning);
            if (!isOptionsValid) AddModuleMessage(Localizer["Error.Profile.Options"], MessageType.Warning);
            if (!isValidationValid) AddModuleMessage(Localizer["Error.Profile.Validation"], MessageType.Warning);
        }
    }
}
