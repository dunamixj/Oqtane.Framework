@namespace Oqtane.Modules.Admin.ModuleCreator
@inherits ModuleBase
@inject NavigationManager NavigationManager
@inject IModuleDefinitionService ModuleDefinitionService
@inject IModuleService ModuleService

<div class="container">
    <form>
        <div class="form-group row">

            <div class="col-xl-3">
                <Label class="col-form-label" For="owner" HelpText="Enter the name of the organization who is developing this module. It should not contain spaces or punctuation.">Owner Name: </Label>
            </div>
            <div class="col-xl-9">
                <input id="owner" class="form-control" @bind="@_owner" />
            </div>
        </div>
        <div class="form-group row">

            <div class="col-xl-3">
                <Label class="col-form-label" For="module" HelpText="Enter a name for this module. It should be in singular form (ie. Car) and not contain spaces or punctuation.">Module Name: </Label>
            </div>
            <div class="col-xl-9">
                <input id="module" class="form-control" @bind="@_module" />
            </div>
        </div>
        <div class="form-group row">
            <div class="col-xl-3">
                <Label class="col-form-label" For="description" HelpText="Enter s short description for the module">Description: </Label>
            </div>
            <div class="col-xl-9">
                <textarea id="description" class="form-control" @bind="@_description" rows="3"></textarea>
            </div>
        </div>
        <div class="form-group row">

            <div class="col-xl-3">
                <Label class="col-form-label" For="template" HelpText="Select a module template. Internal modules are created inside of the Oqtane solution. External modules are created outside of the Oqtane solution.">Template: </Label>
            </div>
            <div class="col-xl-9">
                <select id="template" class="custom-select" @bind="@_template">
                    <option value="">&lt;Select Template&gt;</option>
                    <option value="internal">Internal</option>
                    <option value="external">External</option>
                </select>
            </div>
        </div>
    </form>
</div>
<div class="container">
    <button type="button" class="btn btn-success" @onclick="CreateModule">Create Module</button>
</div>

@code {
    private string _owner = string.Empty;
    private string _module = string.Empty;
    private string _description = string.Empty;
    private string _template = string.Empty;

    public override SecurityAccessLevel SecurityAccessLevel => SecurityAccessLevel.Host;

    protected override void OnInitialized()
    {
        AddModuleMessage("Please Note That Once You Select The Create Module Button The Application Must Restart In Order To Complete The Process. If You Create An External Module You Will Need To Compile The Source Code In Order To Make It Functional.", MessageType.Info);
    }

    private async Task CreateModule()
    {
        try
        {
            if (!string.IsNullOrEmpty(_owner) && !string.IsNullOrEmpty(_module) && !string.IsNullOrEmpty(_template))
            {
                var moduleDefinition = new ModuleDefinition { Owner = _owner.Replace(" ", ""), Name = _module.Replace(" ", ""), Description = _description, Template = _template };
                await ModuleDefinitionService.CreateModuleDefinitionAsync(moduleDefinition, ModuleState.ModuleId);
            }
            else
            {
                AddModuleMessage("You Must Provide An Owner, Module Name, And Template", MessageType.Warning);
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Creating Module");
        }
    }
}
