@namespace Oqtane.Modules.Admin.Roles
@inherits ModuleBase
@inject NavigationManager NavigationManager
@inject IRoleService RoleService

<div class="container">
    <form>
        <div class="form-group row">
            <div class="col-xl-3">
                <Label class="col-form-label" For="name" HelpText="Name Of The Role">Name:</Label>
            </div>
            <div class="col-xl-9">
                <input id="name" class="form-control" @bind="@_name" />
            </div>
        </div>
        <div class="form-group row">
            <div class="col-xl-3">
                <Label class="col-form-label" For="description" HelpText="A Short Description Of The Role Which Describes Its Purpose">Description:</Label>
            </div>
            <div class="col-xl-9">
                <textarea id="description" class="form-control" @bind="@_description" rows="5"></textarea>
            </div>
        </div>
        <div class="form-group row">
            <div class="col-xl-3">
                <Label class="col-form-label" For="isautoassigned" HelpText="Indicates Whether Or Not New Users Are Automatically Assigned To This Role">Auto Assigned?</Label>
            </div>
            <div class="col-xl-9">
                <select id="isautoassigned" class="custom-select" @bind="@_isautoassigned">
                    <option value="True">Yes</option>
                    <option value="False">No</option>
                </select>
            </div>
        </div>
    </form>
</div>
<div class="container">
    <button type="button" class="btn btn-success" @onclick="SaveRole">Save</button>
    <NavLink class="btn btn-secondary" href="@NavigateUrl()">Cancel</NavLink>
</div>

@code {
    private string _name = string.Empty;
    private string _description = string.Empty;
    private string _isautoassigned = "False";

    public override SecurityAccessLevel SecurityAccessLevel => SecurityAccessLevel.Admin;

    private async Task SaveRole()
    {
        var role = new Role();
        role.SiteId = PageState.Page.SiteId;
        role.Name = _name;
        role.Description = _description;
        role.IsAutoAssigned = (_isautoassigned == null ? false : Boolean.Parse(_isautoassigned));
        role.IsSystem = false;

        try
        {
            role = await RoleService.AddRoleAsync(role);
            await logger.LogInformation("Role Added {Role}", role);

            NavigationManager.NavigateTo(NavigateUrl());
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Adding Role {Role} {Error}", role, ex.Message);
            AddModuleMessage("Error Adding Role", MessageType.Error);
        }
    }

}
