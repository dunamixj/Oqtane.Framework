@namespace Oqtane.Themes.Controls
@inherits ThemeControlBase

@if (_moduleDefinitions != null && UserSecurity.IsAuthorized(PageState.User, PermissionNames.Edit, PageState.Page.Permissions))
{
    <div class="app-controlpanel" style="@_display">

        <div class="@CardClass">
            <div class="@HeaderClass">
                <span class="font-weight-bold">Control Panel</span>
                <button type="button" class="close" @onclick="HideControlPanel" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="@BodyClass">

                @if (UserSecurity.IsAuthorized(PageState.User, Constants.AdminRole))
                {
                    <div class="row">
                        <div class="col">
                            <button type="button" class="btn btn-primary btn-block mx-auto" @onclick=@(async () => Navigate("Admin"))>Admin Dashboard</button>
                        </div>
                    </div>

                    <hr class="app-rule" />

                    <div class="row">
                        <div class="col text-center">
                            <label class="control-label">Page Management: </label>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <button type="button" class="btn btn-primary btn-block mx-auto" @onclick=@(async () => Navigate("Add"))>Add</button>
                        </div>
                        <div class="col">
                            <button type="button" class="btn btn-primary btn-block mx-auto" @onclick=@(async () => Navigate("Edit"))>Edit</button>
                        </div>
                        <div class="col">
                            <button class="btn btn-danger btn-block mx-auto" @onclick="ConfirmDelete">Delete</button>
                        </div>
                    </div>
                    <br />
                    <div class="row">
                        @if (UserSecurity.GetPermissionStrings(PageState.Page.Permissions).FirstOrDefault(item => item.PermissionName == PermissionNames.View).Permissions.Split(';').Contains(Constants.AllUsersRole))
                        {
                            <div class="col">
                                <button type="button" class="btn btn-primary btn-block mx-auto" @onclick=@(async () => Publish("unpublish"))>Unpublish Page</button>
                            </div>
                        }
                        else
                        {
                            <div class="col">
                                <button type="button" class="btn btn-primary btn-block mx-auto" @onclick=@(async () => Publish("publish"))>Publish Page</button>
                            </div>
                        }
                    </div>
                }

                @if (_deleteConfirmation)
                {
                    <div class="app-admin-modal">
                        <div class="modal" tabindex="-1" role="dialog">
                            <div class="modal-dialog">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title">Delete Page</h5>
                                        <button type="button" class="close" @onclick="ConfirmDelete" aria-label="Close">&times;</button>
                                    </div>
                                    <div class="modal-body">
                                        <p>Are You Sure You Want To Delete This Page?</p>
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-danger" @onclick="DeletePage">Delete</button>
                                        <button type="button" class="btn btn-secondary" @onclick="ConfirmDelete">Cancel</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
                <hr class="app-rule" />

                <div class="row">
                    <div class="col text-center">
                        <label for="Module" class="control-label">Module Management: </label>
                        <select class="form-control" @bind="@ModuleType">
                            <option value="new">Add New Module</option>
                            <option value="existing">Add Existing Module</option>
                        </select>
                        @if (ModuleType == "new")
                        {
                            @if (_moduleDefinitions != null)
                            {
                                <select class="form-control" @onchange="(e => CategoryChanged(e))">
                                    @foreach (var category in _categories)
                                    {
                                        if (category == Category)
                                        {
                                            <option value="@category" selected>@category Modules</option>
                                        }
                                        else
                                        {
                                            <option value="@category">@category Modules</option>
                                        }
                                    }
                                </select>
                                <select class="form-control" @onchange="(e => ModuleChanged(e))">
                                    @if (ModuleDefinitionName == "-")
                                    {
                                        <option value="-" selected>&lt;Select Module&gt;</option>
                                    }
                                    else
                                    {
                                        <option value="-">&lt;Select Module&gt;</option>
                                    }
                                    @foreach (var moduledefinition in _moduleDefinitions)
                                    {
                                        if (UserSecurity.IsAuthorized(PageState.User, PermissionNames.Utilize, moduledefinition.Permissions))
                                        {
                                            if (moduledefinition.Runtimes == "" || moduledefinition.Runtimes.Contains(PageState.Runtime.ToString()))
                                            {
                                                <option value="@moduledefinition.ModuleDefinitionName">@moduledefinition.Name</option>
                                            }
                                        }
                                    }
                                </select>
                                @((MarkupString) Description)
                            }
                        }
                        else
                        {
                            <select class="form-control" @onchange="(e => PageChanged(e))">
                                <option value="-">&lt;Select Page&gt;</option>
                                @foreach (Page p in _pages)
                                {
                                    <option value="@p.PageId">@p.Name</option>
                                }
                            </select>
                            <select class="form-control" @bind="@ModuleId">
                                <option value="-">&lt;Select Module&gt;</option>
                                @foreach (Module module in _modules)
                                {
                                    <option value="@module.ModuleId">@module.Title</option>
                                }
                            </select>
                        }
                    </div>
                </div>
                <div class="row">
                    <div class="col text-center">
                        <label for="Title" class="control-label">Title: </label>
                        <input type="text" name="Title" class="form-control" @bind="@Title" />
                    </div>
                </div>
                @if (_pane.Length > 1)
                {
                    <div class="row">
                        <div class="col text-center">
                            <label for="Pane" class="control-label">Pane: </label>
                            <select class="form-control" @bind="@Pane">
                                @foreach (string pane in PageState.Page.Panes)
                                {
                                    <option value="@pane">@pane Pane</option>
                                }
                            </select>
                        </div>
                    </div>
                }
                <div class="row">
                    <div class="col text-center">
                        <label for="Container" class="control-label">Container: </label>
                        <select class="form-control" @bind="@ContainerType">
                            @foreach (var container in _containers)
                            {
                                <option value="@container.TypeName">@container.Name</option>
                            }
                        </select>
                    </div>
                </div>

                <br />

                <button type="button" class="btn btn-primary btn-block mx-auto" @onclick="@AddModule">Add Module To Page</button>
                @((MarkupString) Message)
            </div>
        </div>
    </div>
}

@if (UserSecurity.IsAuthorized(PageState.User, PermissionNames.Edit, PageState.Page.Permissions) || (PageState.Page.IsPersonalizable && PageState.User != null))
{
    if (PageState.EditMode)
    {
        <button type="button" class="btn @ButtonClass active" data-toggle="button" aria-pressed="true" autocomplete="off" @onclick="(async () => await ToggleEditMode(PageState.EditMode))">
            <span class="oi oi-pencil"></span>
        </button>
    }
    else
    {
        <button type="button" class="btn @ButtonClass" data-toggle="button" aria-pressed="false" autocomplete="off" @onclick="(async () => await ToggleEditMode(PageState.EditMode))">
            <span class="oi oi-pencil"></span>
        </button>
    }
}

@if (UserSecurity.IsAuthorized(PageState.User, PermissionNames.Edit, PageState.Page.Permissions))
{
    <button type="button" class="btn @ButtonClass" @onclick="ShowControlPanel">
        <span class="oi oi-cog"></span>
    </button>
}